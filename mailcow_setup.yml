---
# Mailcow mit Nginx Reverse Proxy Setup
# Ausführung: ansible-playbook -i inventory mailcow_setup.yml
#
# Dieses Playbook installiert:
# - Nginx als Reverse Proxy für Mailcow
# - Let's Encrypt SSL Zertifikate 
# - Automatische Zertifikat-Synchronisation
# - Mailcow Docker Setup

- name: "Setup Mailcow with Nginx Reverse Proxy"
  hosts: mailserver
  become: true
  vars:
    # Main configuration variables
    mail_domain: "{{ mail_server_name | default('mail.example.com') }}"
    mailcow_path: "/opt/mailcow-dockerized"
    nginx_ssl_path: "/etc/letsencrypt/live/{{ mail_domain }}"
    mailcow_ssl_path: "{{ mailcow_path }}/data/assets/ssl"
    admin_email: "{{ admin_email_address | default('admin@example.com') }}"
    
    # Security settings
    ssl_protocols: "TLSv1.2 TLSv1.3"
    ssl_ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
    
  tasks:
    - name: "Detect OS distribution"
      setup:
        gather_subset:
          - "!all"
          - "!min"
          - distribution

    - name: "Configure Debian 12 package sources"
      template:
        src: sources.list.j2
        dest: /etc/apt/sources.list
        backup: true
        mode: '0644'
      when: ansible_distribution == "Debian" and ansible_distribution_major_version == "12"
      notify: update apt cache

    - name: "Install required packages"
      package:
        name:
          - nginx
          - certbot
          - python3-certbot-nginx
          - docker.io
          - docker-compose
          - git
          - curl
        state: present
        update_cache: true

    - name: "Create mailcow user for security"
      user:
        name: mailcow
        system: true
        shell: /bin/bash
        home: "{{ mailcow_path }}"
        create_home: false

    - name: "Create directory structure"
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "/var/www/{{ mail_domain }}"
        - "/var/log/nginx"
        - "/etc/nginx/snippets"

    - name: "Create nginx error pages snippet"
      copy:
        dest: "/etc/nginx/snippets/error_pages.conf"
        content: |
          # Custom error pages
          error_page 404 /404.html;
          error_page 500 502 503 504 /50x.html;
        mode: '0644'

    - name: "Create temporary HTTP-only nginx configuration"
      template:
        src: nginx_http_only.conf.j2
        dest: "/etc/nginx/sites-available/{{ mail_domain }}-temp"
        mode: '0644'

    - name: "Enable temporary nginx site"
      file:
        src: "/etc/nginx/sites-available/{{ mail_domain }}-temp"
        dest: "/etc/nginx/sites-enabled/{{ mail_domain }}-temp"
        state: link

    - name: "Remove default nginx site"
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent

    - name: "Create simple index page"
      copy:
        dest: "/var/www/{{ mail_domain }}/index.html"
        content: |
          <!DOCTYPE html>
          <html>
          <head><title>{{ mail_domain }}</title></head>
          <body><h1>Mail Server - Setup in Progress</h1></body>
          </html>
        mode: '0644'

    - name: "Start and enable nginx (HTTP-only for certbot)"
      systemd:
        name: nginx
        state: started
        enabled: true

    - name: "Obtain Let's Encrypt certificate"
      shell: |
        certbot certonly --webroot -w /var/www/{{ mail_domain }} -d {{ mail_domain }} \
          --non-interactive --agree-tos --email {{ admin_email }} \
          --expand
      args:
        creates: "{{ nginx_ssl_path }}/fullchain.pem"

    - name: "Create Let's Encrypt SSL configuration files"
      copy:
        dest: "{{ item.dest }}"
        content: "{{ item.content }}"
        mode: "{{ item.mode }}"
      loop:
        - dest: "/etc/letsencrypt/options-ssl-nginx.conf"
          mode: '0644'
          content: |
            # Modern SSL configuration for nginx
            # Generated by Ansible
            ssl_session_cache shared:le_nginx_SSL:10m;
            ssl_session_timeout 1440m;
            ssl_session_tickets off;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_prefer_server_ciphers off;
            ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
        - dest: "/etc/letsencrypt/ssl-dhparams.pem"
          mode: '0644'
          content: |
            -----BEGIN DH PARAMETERS-----
            MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
            +8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
            87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
            YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
            7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
            ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==
            -----END DH PARAMETERS-----

    - name: "Ensure Let's Encrypt directory structure exists"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "/etc/letsencrypt"
        - "/etc/letsencrypt/live"
        - "/etc/letsencrypt/archive"

    - name: "Create full nginx site configuration with SSL"
      template:
        src: nginx_mailcow.conf.j2
        dest: "/etc/nginx/sites-available/{{ mail_domain }}"
        backup: true
        mode: '0644'

    - name: "Enable full nginx site configuration"
      file:
        src: "/etc/nginx/sites-available/{{ mail_domain }}"
        dest: "/etc/nginx/sites-enabled/{{ mail_domain }}"
        state: link

    - name: "Remove temporary nginx configuration"
      file:
        path: "/etc/nginx/sites-enabled/{{ mail_domain }}-temp"
        state: absent

    - name: "Test nginx configuration"
      command: nginx -t
      changed_when: false

    - name: "Reload nginx with SSL configuration"
      systemd:
        name: nginx
        state: reloaded

    - name: "Clone mailcow repository"
      git:
        repo: "https://github.com/mailcow/mailcow-dockerized.git"
        dest: "{{ mailcow_path }}"
        version: master
        force: true
      become_user: mailcow

    - name: "Generate mailcow configuration"
      shell: |
        cd {{ mailcow_path }}
        ./generate_config.sh
      args:
        creates: "{{ mailcow_path }}/mailcow.conf"
      become_user: mailcow

    - name: "Configure mailcow for reverse proxy"
      lineinfile:
        path: "{{ mailcow_path }}/mailcow.conf"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: true
      loop:
        - { regexp: '^MAILCOW_HOSTNAME=', line: 'MAILCOW_HOSTNAME={{ mail_domain }}' }
        - { regexp: '^HTTP_PORT=', line: 'HTTP_PORT=8080' }
        - { regexp: '^HTTPS_PORT=', line: 'HTTPS_PORT=8443' }
        - { regexp: '^SKIP_LETS_ENCRYPT=', line: 'SKIP_LETS_ENCRYPT=y' }

    - name: "Create SSL certificate sync script"
      template:
        src: ssl_sync.sh.j2
        dest: "/usr/local/bin/ssl_sync.sh"
        mode: '0755'
        backup: true

    - name: "Add SSL sync cron job"
      cron:
        name: "Sync SSL certificates for mailcow"
        minute: "0"
        hour: "*/12"
        job: "/usr/local/bin/ssl_sync.sh"
        user: root

    - name: "Start mailcow services"
      shell: |
        cd {{ mailcow_path }}
        docker-compose up -d
      become_user: mailcow

    - name: "Initial SSL certificate sync"
      command: /usr/local/bin/ssl_sync.sh

  handlers:
    - name: update apt cache
      apt:
        update_cache: true
      when: ansible_distribution == "Debian"

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded
